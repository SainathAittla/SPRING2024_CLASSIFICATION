import pandas as pd
import sqlite3
from sqlite3 import Error

def ex1():
    # Write an SQL statement that SELECTs all rows from the `customers` table
    # output columns: cust_name, cust_email

    sql_statement = "SELECT cust_name,cust_email From customers"
# WRITE YOUR CODE HERE
    return sql_statement

def ex2():
    # Write an SQL statement that SELECTs all rows from the `products` table
    # output columns: vend_id

    sql_statement = "SELECT vend_id from products"
# WRITE YOUR CODE HERE
    return sql_statement


def ex3():
    # Write an SQL statement that SELECTs distinct rows for vend_id from the `products` table
    # output columns: vend_id


    sql_statement = "SELECT distinct(vend_id) from products"
# WRITE YOUR CODE HERE
    return sql_statement


def ex4():
    # Write an SQL statement that SELECTs the first five rows from the `products` table
    # output columns: prod_name


    sql_statement = "SELECT prod_name from products LIMIT 5"
# WRITE YOUR CODE HERE
    return sql_statement


def ex5():
    # Write an SQL statement that SELECTs 4 rows starting from row 3 from `products` table
    # output columns: prod_name


    sql_statement = "SELECT prod_name from products LIMIT 3,4"
# WRITE YOUR CODE HERE
    return sql_statement


def ex6():
    # Write an SQL statement that SELECTs all rows from `products` table and sorts by prod_name
    # output columns: prod_name

    sql_statement = "SELECT prod_name from products order by prod_name"
# WRITE YOUR CODE HERE
    return sql_statement


def ex7():
    # Write an SQL statement that SELECTs all rows from `products` table and sorts by prod_price and then prod_name 
    # output columns: prod_id, prod_price, prod_name


    sql_statement = "SELECT prod_id,prod_price,prod_name from products order by prod_price,prod_name"
# WRITE YOUR CODE HERE
    return sql_statement


def ex8():
    # Write an SQL statement that SELECTs all rows from `products` table and sorts by prod_price (descending order)
    # and then prod_name 
    # output columns: prod_id, prod_price, prod_name


    sql_statement = "SELECT prod_id,prod_price,prod_name from products order by prod_price desc,prod_name"
# WRITE YOUR CODE HERE
    return sql_statement


def ex9():
    # Write an SQL statement that SELECTs all rows from `products` table where the price of product is 2.50
    # output columns: prod_id, prod_price, prod_name


    sql_statement = "SELECT prod_id,prod_price,prod_name from products where prod_price=2.50"
# WRITE YOUR CODE HERE
    return sql_statement

def ex10():
    # Write an SQL statement that SELECTs all rows from `products` table where the name of product is Oil can
    # output columns: prod_id, prod_price, prod_name


    sql_statement = "SELECT prod_id,prod_price,prod_name from products where prod_name ='Oil can'"
# WRITE YOUR CODE HERE
    return sql_statement


def ex11():
    # Write an SQL statement that SELECTs all rows from `products` table where the price of product is 
    # less than or equal to 10
    # output columns: prod_id, prod_price, prod_name


    sql_statement = "SELECT prod_id,prod_price,prod_name from products where prod_price<=10"
# WRITE YOUR CODE HERE

    return sql_statement


def ex12():
    # Write an SQL statement that SELECTs all rows from `products` table where the vendor id is not equal to 1003
    # output columns: vend_id, prod_name


    sql_statement = "SELECT vend_id,prod_name from products where vend_id!=1003"
# WRITE YOUR CODE HERE

    return sql_statement

def ex13():
    # Write an SQL statement that SELECTs all rows from `products` table where the product prices are between 5 and 10
    # output columns: prod_name, prod_price


    sql_statement = "SELECT prod_name,prod_price from products where prod_price>=5 and prod_price<=10"
# WRITE YOUR CODE HERE

    return sql_statement


def ex14():
    # Write an SQL statement that SELECTs all rows from the `customers` table where the customer email is empty
    # output columns: cust_id, cust_name


    sql_statement = "SELECT cust_id,cust_name from customers where cust_email is null"
# WRITE YOUR CODE HERE

    return sql_statement


def ex15():
    # Write an SQL statement that SELECTs all rows from the `products` table where the vender id is 1003 and
    # the price is less than or equal to 10. 
    # output columns: vend_id, prod_id, prod_price, prod_name


    sql_statement = "SELECT vend_id,prod_id,prod_price,prod_name from products where vend_id=1003 and prod_price<=10"
# WRITE YOUR CODE HERE

    return sql_statement

def ex16():
    # Write an SQL statement that SELECTs all rows from the `products` table where the vender id is 1002 or 1003 and
    # the price is greater than or equal to 5. 
    # output columns: vend_id, prod_id, prod_price, prod_name


    sql_statement = "SELECT vend_id, prod_id, prod_price, prod_name from products where vend_id in (1002,1003) and prod_price>=5"
# WRITE YOUR CODE HERE

    return sql_statement

def ex17():
    # Write an SQL statement that SELECTs all rows from the `products` table where the vender id is 1002 or 1003 or 1005.
    # Use the IN operator for this!
    # output columns: vend_id, prod_id, prod_price, prod_name


    sql_statement = "SELECT vend_id,prod_id,prod_price,prod_name from products where vend_id in (1002,1003,1005)"
# WRITE YOUR CODE HERE

    return sql_statement


def ex18():
    # Write an SQL statement that SELECTs all rows from the `products` table where the vender id is NOT 1002 or 1003.
    # Use the NOT IN operator for this!
    # output columns: vend_id, prod_id, prod_price, prod_name


    sql_statement = "SELECT vend_id, prod_id, prod_price, prod_name from products where vend_id not in (1002,1003)"
# WRITE YOUR CODE HERE

    return sql_statement

def ex19():
    # Write an SQL statement that SELECTs all rows from the `products` table where the product name starts with 'jet'
    # output columns: prod_id, prod_price, prod_name


    sql_statement = "SELECT prod_id, prod_price, prod_name from products where prod_name LIKE 'jet%'"
# WRITE YOUR CODE HERE

    return sql_statement

def ex20():
    # Write an SQL statement that SELECTs all rows from the `products` table where the product name ends with 'anvil'
    # output columns: prod_id, prod_price, prod_name


    sql_statement = "SELECT prod_id, prod_price, prod_name from products where prod_name LIKE '%anvil'"
# WRITE YOUR CODE HERE

    return sql_statement

def ex21():
    # Write an SQL statement that SELECTs all rows from the `vendors` table. Concatenate vendor name and vendor country
    # as vend_title. Order by vend_title. Leave space in between -- example `ACME (USA)`
    # output columns: vend_title


    sql_statement = "SELECT (vend_name || ' (' || vend_country || ')') as vend_title  from vendors order by vend_title"
# WRITE YOUR CODE HERE

    return sql_statement


def ex22():
    # Write an SQL statement that SELECTs all rows from the `orderitems` table where order number is 20005. 
    # Display an extra calculated column called `expanded_price` that is the result of quantity multiplied by item_price.
    # Round the value to two decimal places. 
    # output columns: prod_id, quantity, item_price, expanded_price


    sql_statement = "SELECT prod_id,quantity,item_price,ROUND((quantity*item_price),2) as expanded_price from orderitems where order_num=20005"
# WRITE YOUR CODE HERE

    return sql_statement

def ex23():
    # Write an SQL statement that SELECTs all rows from the `orders` table where the order date is between 
    # 2005-09-13 and 2005-10-04
    # output columns: order_num, order_date
    # https://www.sqlitetutorial.net/sqlite-date-functions/sqlite-date-function/
    

    sql_statement = "select order_num, order_date from orders where order_date between '2005-09-13' and '2005-10-04'"
# WRITE YOUR CODE HERE

    return sql_statement

def ex24():
    # Write an SQL statement that calculates the average price of all rows in the `products` table. 
    # Call the average column avg_price
    # output columns: avg_price


    sql_statement = "select avg(prod_price) as avg_price from products"
# WRITE YOUR CODE HERE

    return sql_statement


def ex25():
    # Write an SQL statement that calculates the average price of all rows in the `products` table 
    # where the vendor id is 1003 . Call the average column avg_price
    # output columns: avg_price


    sql_statement = "select avg(prod_price) as avg_price from products where vend_id=1003"
# WRITE YOUR CODE HERE

    return sql_statement



def ex26():
    # Write an SQL statement that counts the number of customers in the `customers` table 
    # Call the count column num_cust
    # output columns: num_cust


    sql_statement = "select count(*) as num_cust from customers"
# WRITE YOUR CODE HERE

    return sql_statement

def ex27():
    # Write an SQL statement that calculates the max price in the `products` table 
    # Call the max column max_price. Round the value to two decimal places. 
    # output columns: max_price



    sql_statement = "select max(prod_price) as max_price from products"
# WRITE YOUR CODE HERE

    return sql_statement

def ex28():
    # Write an SQL statement that calculates the min price in the `products` table 
    # Call the min column min_price. Round the value to two decimal places. 
    # output columns: min_price


    sql_statement = "select round(min(prod_price),2) as min_price from products"
# WRITE YOUR CODE HERE

    return sql_statement

def ex29():
    # Write an SQL statement that sums the quantity in the `orderitems` table where order number is 20005. 
    # Call the sum column items_ordered
    # output columns: items_ordered


    sql_statement = "select sum(quantity) as items_ordered from orderitems where order_num=20005"
# WRITE YOUR CODE HERE

    return sql_statement


#---------------------------------------------------------------------------------------------------------------------------------------------#

# You cannot use Pandas! I will deduct points after manual check if you use Pandas. You CANNOT use the 'csv' module to read the file

# Hint: Ensure to strip all strings so there is no space in them

# DO NOT use StudentID from the non_normalized table. Let the normalized table automatically handle StudentID. 


def create_connection(db_file, delete_db=False):
    import os
    if delete_db and os.path.exists(db_file):
        os.remove(db_file)

    conn = None
    try:
        conn = sqlite3.connect(db_file)
        conn.execute("PRAGMA foreign_keys = 1")
    except Error as e:
        print(e)

    return conn


def create_table(conn, create_table_sql):
    try:
        c = conn.cursor()
        c.execute(create_table_sql)
    except Error as e:
        print(e)
        
def execute_sql_statement(sql_statement, conn):
    cur = conn.cursor()
    cur.execute(sql_statement)

    rows = cur.fetchall()

    return rows

# conn_non_normalized = create_connection('non_normalized.db')
# sql_statement = "select * from Students;"
# df = pd.read_sql_query(sql_statement, conn_non_normalized)
# display(df)


def normalize_database(non_normalized_db_filename):
#     Normalize 'non_normalized.db'
#     Call the normalized database 'normalized.db'
#     Function Output: No outputs
#     Requirements:
#     Create four tables
#     Degrees table has one column:
#         [Degree] column is the primary key
    
#     Exams table has two columns:
#         [Exam] column is the primary key column
#         [Year] column stores the exam year
    
#     Students table has four columns:
#         [StudentID] primary key column 
#         [First_Name] stores first name
#         [Last_Name] stores last name
#         [Degree] foreign key to Degrees table
        
#     StudentExamScores table has four columns:
#         [PK] primary key column,
#         [StudentID] foreign key to Students table,
#         [Exam] foreign key to Exams table ,
#         [Score] exam score
    conn_non_normalized = create_connection('non_normalized.db')
    conn_normalized = create_connection('normalized.db',True)

    def insert_values(data,count,tablename):
       sql = f'INSERT INTO {tablename} values ({",".join(["?"] * count)});'
       cur = conn_normalized.cursor()
       cur.execute(sql,data)

    sql_statement = '''CREATE TABLE Degrees (
    Degree TEXT NOT NULL PRIMARY KEY
     );'''
    create_table(conn_normalized,sql_statement)

    sql_statement = '''CREATE TABLE Exams (
    Exam TEXT NOT NULL,
    Year INTEGER NOT NULL,
    PRIMARY KEY (Exam) );'''
    create_table(conn_normalized,sql_statement)

    sql_statement = '''CREATE TABLE Students (
    StudentID INTEGER NOT NULL,
    First_Name varchar(255) NOT NULL,
    Last_Name varchar(255) NOT NULL,
    Degree varchar(255) NOT NULL,
    PRIMARY KEY (StudentId),
    FOREIGN KEY (Degree) REFERENCES Degrees(Degree) );'''
    create_table(conn_normalized,sql_statement)

    sql_statement = '''CREATE TABLE StudentExamScores (
    PK int NOT NULL,
    StudentId INTEGER NOT NULL,
    Exam TEXT NOT NULL,
    Score REAL,
    PRIMARY KEY (PK),
    FOREIGN KEY (StudentId) REFERENCES Students(StudentId),
    FOREIGN KEY (Exam) REFERENCES Exams(Exam) );'''
    create_table(conn_normalized,sql_statement)
    
    degreeValues = execute_sql_statement('select distinct Degree from Students',conn_non_normalized)
    with conn_normalized:
        for degree in degreeValues:
            insert_values(degree,1,'Degrees')

    examValues = execute_sql_statement('select Exams from Students',conn_non_normalized)
    with conn_normalized:
        remove_duplicates = set()
        for exam,*_ in examValues:
            val = str(exam).split(',')
            for i in val:
                temp = i.replace('(','').replace(')','').strip().split(' ')
                e = temp[0]
                y = int(temp[1])
                remove_duplicates.add((e,y))
        for i in remove_duplicates:
            insert_values(i,2,'Exams')

    studentValues = execute_sql_statement('select StudentID,Name,Degree from Students',conn_non_normalized)
    with conn_normalized:
        for value in studentValues:
            stuid = value[0]
            temp = value[1].split(',')
            Last_Name = temp[0].strip()
            First_Name = temp[1].strip()
            degree = value[2]
            insert_values((stuid,First_Name,Last_Name,degree),4,'Students')

    scoreValues = execute_sql_statement('select StudentID,Exams,Scores from Students',conn_non_normalized)
    with conn_normalized:
      count=1
      for value in scoreValues:
        stuid = value[0]
        exam = value[1]
        exam = exam.split(',')
        temp_exam = []
        score = value[2]
        score = score.split(',')
        temp_score = []
        for i in range(len(exam)):
          temp_exam.append(exam[i].strip().split(' ')[0])
        for i in range(len(score)):
          temp_score.append(int(score[i].strip()))
          insert_values((count,stuid,temp_exam[i],temp_score[i]),4,'StudentExamScores')
          count+=1
        

    conn_normalized.commit()

    #sql_statement = "select * from Students;"
    #df = pd.read_sql_query(sql_statement, conn_non_normalized)
    #display(df)
    

    # sql_statement = ''' Create Table Students(
    #   Student ID
    #   Degree TEXT NOT NULL,
    #   PRIMARY KEY (Degree),
    # );'''

    
# normalize_database('non_normalized.db')
# conn_normalized = create_connection('normalized.db')

def ex30(conn):
    # Write an SQL statement that SELECTs all rows from the `Exams` table and sort the exams by Year
    # output columns: exam, year
    sql_statement = "select * from Exams order by Year,Exam"
# WRITE YOUR CODE HERE
   
    return sql_statement


def ex31(conn):
    # Write an SQL statement that SELECTs all rows from the `Degrees` table and sort the degrees by name
    # output columns: degree
    sql_statement = "select Degree from Degrees order by Degree"
# WRITE YOUR CODE HERE
   
    return sql_statement


def ex32(conn):
    # Write an SQL statement that counts the numbers of gradate and undergraduate students
    # output columns: degree, count_degree
    
    sql_statement = "select Degree, count(*) as count_degree from Students group by Degree;"
# WRITE YOUR CODE HERE
    
    return sql_statement


def ex33(conn):
    # Write an SQL statement that calculates the exam averages for exams; sort by average in descending order.
    # output columns: exam, year, average
    # round to two decimal places
    
    sql_statement = """select e.Exam,e.Year,round(avg(s.Score),2) as average
                       from
                       exams e
                       join
                       StudentExamScores s on e.Exam = s.Exam
                       group by
                       e.Exam, e.Year
                       order by
                       average desc"""
# WRITE YOUR CODE HERE
    return sql_statement


def ex34(conn):
    # Write an SQL statement that calculates the exam averages for degrees; sort by average in descending order.
    # output columns: degree, average 
    # round to two decimal places
    
    sql_statement = """select s.Degree , round(avg(se.Score),2) as average 
                       from StudentExamScores se 
                       join Students s
                       on se.StudentId = s.StudentId
                       group by s.Degree
                       order by average desc"""
# WRITE YOUR CODE HERE
    return sql_statement

def ex35(conn):
    # Write an SQL statement that calculates the exam averages for students; sort by average in descending order. Show only top 10 students
    # output columns: first_name, last_name, degree, average
    # round to two decimal places
    # Order by average in descending order
    # Warning two of the students have the same average!!!
    
    sql_statement = """select s.First_Name , s.Last_Name , s.Degree , round(avg(se.Score),2) as average 
                       from StudentExamScores se 
                       join Students s
                       on se.StudentId = s.StudentId
					             group by se.StudentId
                       order by average desc
                       limit 10"""
# WRITE YOUR CODE HERE
    return sql_statement
