knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("gridExtra", quietly = TRUE)) install.packages("gridExtra")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
if (!requireNamespace("caret", quietly = TRUE)) install.packages("caret")
if (!requireNamespace("MASS", quietly = TRUE)) install.packages("MASS")
# Load necessary libraries
library(ggplot2)      # For plotting, similar to matplotlib
library(gridExtra)    # For arranging multiple plots, similar to matplotlib's gridspec
library(dplyr)        # Data manipulation, similar to pandas
library(caret)        # For machine learning, similar to sklearn
library(MASS)         # Contains data sets and functions
# Check R version
R.version.string
# Suppress warnings
options(warn = -1)
# Load necessary libraries
# Load necessary libraries
# Load necessary libraries
library(dplyr)
library(readr)
library(tidyr)
library(knitr)
# Reading the data
df <- read.csv('/kaggle/input/obesity-levels/ObesityDataSet_raw_and_data_sinthetic.csv')
# Load necessary libraries
# Load necessary libraries
# Load necessary libraries
library(dplyr)
library(readr)
library(tidyr)
library(knitr)
# Reading the data
df <- read_csv('obesity.csv')
# Load necessary libraries
# Load necessary libraries
# Load necessary libraries
library(dplyr)
library(readr)
library(tidyr)
library(knitr)
# Reading the data
df <- read_csv('obesity.csv')
# Visualizing data
print(head(df, 5))
print(dim(df))  # Display the shape of the dataframe
# Creating DataFrame with Dtype, Unique, and Null information
df_info <- data.frame(
Dtype = sapply(df, class),
Unique = sapply(df, function(x) length(unique(x))),
Null = sapply(df, function(x) sum(is.na(x)))
)
# Handling organic and synthetic data
df_organic <- head(df, 498)
df_synthetic <- slice(df, 499:n())
# Printing last and first few rows of organic and synthetic data respectively
print(tail(df_organic, 3))
print(head(df_synthetic, 3))
# Updating unique counts for organic and synthetic data separately
df_info$Unique_Organic <- sapply(df_organic, function(x) length(unique(x)))
df_info$Unique_Synthetic <- sapply(df_synthetic, function(x) length(unique(x)))
# Converting "Age" column to integer
df$Age <- as.integer(df$Age)
# Float Columns
float_columns <- c('Height', 'Weight', 'NCP', 'FCVC', 'CH2O', 'FAF', 'TUE')
# Round the float columns to two decimal places
df[float_columns] <- round(df[float_columns], 2)
# Check for and handle duplicates
print(sum(duplicated(df)))
duplicated_df <- df[duplicated(df, keep = FALSE), ]
print(head(duplicated_df, 5))
# Dropping duplicates
df <- df[!duplicated(df), ]
print(dim(df))
# Describe the DataFrame
print(summary(df))
# Calculate the Body Mass Index (BMI)
df$BMI <- round(df$Weight / (df$Height^2), 2)
print(head(df, 1))
#############################################################
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra) # For arranging plots
# Define colors
colors <- c("#8BD5EA", "#02231C", "#8A55A2", "#5854A3", "#2D5653")
colorbg <- "#C7F6EC"
# Set theme for plots
theme_set(theme_minimal(base_size = 14) +
theme(
panel.background = element_rect(fill = colorbg, colour = NA),
plot.background = element_rect(fill = colorbg, colour = NA),
axis.text = element_text(color = colors[2]),
axis.title = element_text(color = colors[2]),
plot.title = element_text(color = colors[2], size = 16, hjust = 0.5)
))
# Plot categorical features
plot_categorical_features <- function(df) {
categorical_features <- sapply(df, is.factor)  # Ensure these are actually factors
plots <- list()
for (i in which(categorical_features)) {
p <- ggplot(df, aes_string(x = names(df)[i], fill = names(df)[i])) +
geom_bar(color = colors[2], show.legend = FALSE) +
labs(title = names(df)[i]) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plots[[length(plots) + 1]] <- p
}
if (length(plots) > 0) {
do.call(gridExtra::grid.arrange, c(plots, ncol = 2))
} else {
print("No categorical features to plot.")
}
}
print(plot_categorical_features)
# Plot numerical features
plot_numerical_features <- function(df) {
numerical_features <- sapply(df, is.numeric)  # Ensure these are numeric
plots <- list()
for (i in which(numerical_features)) {
p1 <- ggplot(df, aes_string(x = names(df)[i])) +
geom_histogram(aes(y = ..density..), bins = 30, fill = colors[1], color = "black") +
geom_density(color = colors[2], size = 1) +
labs(title = paste("Distribution of", names(df)[i]))
p2 <- ggplot(df, aes_string(x = names(df)[i], fill = "..x..")) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
scale_fill_gradient(low = colors[1], high = colors[4]) +
labs(title = paste("Boxplot of", names(df)[i]))
plots[[length(plots) + 1]] <- p1
plots[[length(plots) + 1]] <- p2
}
if (length(plots) > 0) {
do.call(gridExtra::grid.arrange, c(plots, ncol = 2))
} else {
print("No numerical features to plot.")
}
}
print(plot_numerical_features)
# Assuming data is already read as `data`
df <- read.csv("obesity.csv")
# Calculate BMI and round to 2 decimal places
df$BMI <- round(df$Weight / (df$Height / 100) ** 2, 2)
# Display the first row of the dataframe
head(df, 1)
library(ggplot2)
# Plot categorical features
plot_categorical_features <- function(df) {
categorical_features <- sapply(df, is.factor)  # Ensure these are actually factors
plots <- list()
for (i in which(categorical_features)) {
p <- ggplot(df, aes_string(x = names(df)[i], fill = names(df)[i])) +
geom_bar(color = colors[2], show.legend = FALSE) +
labs(title = names(df)[i]) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plots[[length(plots) + 1]] <- p
}
if (length(plots) > 0) {
do.call(gridExtra::grid.arrange, c(plots, ncol = 2))
} else {
print("No categorical features to plot.")
}
}
# Plot numerical features
plot_numerical_features <- function(df) {
numerical_features <- sapply(df, is.numeric)  # Ensure these are numeric
plots <- list()
for (i in which(numerical_features)) {
p1 <- ggplot(df, aes_string(x = names(df)[i])) +
geom_histogram(aes(y = ..density..), bins = 30, fill = colors[1], color = "black") +
geom_density(color = colors[2], size = 1) +
labs(title = paste("Distribution of", names(df)[i]))
p2 <- ggplot(df, aes_string(x = names(df)[i], fill = "..x..")) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
scale_fill_gradient(low = colors[1], high = colors[4]) +
labs(title = paste("Boxplot of", names(df)[i]))
plots[[length(plots) + 1]] <- p1
plots[[length(plots) + 1]] <- p2
}
if (length(plots) > 0) {
print(do.call(gridExtra::grid.arrange, c(plots, ncol = 2)))
} else {
print("No numerical features to plot.")
}
}
