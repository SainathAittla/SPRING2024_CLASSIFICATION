### Utility Functions
import pandas as pd
import sqlite3
from sqlite3 import Error

def create_connection(db_file, delete_db=False):
    import os
    if delete_db and os.path.exists(db_file):
        os.remove(db_file)

    conn = None
    try:
        conn = sqlite3.connect(db_file)
        conn.execute("PRAGMA foreign_keys = 1")
    except Error as e:
        print(e)

    return conn


def create_table(conn, create_table_sql, drop_table_name=None):
    
    if drop_table_name: # You can optionally pass drop_table_name to drop the table. 
        try:
            c = conn.cursor()
            c.execute("""DROP TABLE IF EXISTS %s""" % (drop_table_name))
        except Error as e:
            print(e)
    
    try:
        c = conn.cursor()
        c.execute(create_table_sql)
    except Error as e:
        print(e)
        
def execute_sql_statement(sql_statement, conn):
    cur = conn.cursor()
    cur.execute(sql_statement)

    rows = cur.fetchall()

    return rows

def step1_create_region_table(data_filename, normalized_database_filename):
    # Inputs: Name of the data and normalized database filename
    # Output: None
    file = open(data_filename, 'r')
    conn_normalized = create_connection(normalized_database_filename)
    sql_statement='''CREATE TABLE Region (
      RegionID Integer not null primary key,
      Region Text not null
      );'''
    create_table(conn_normalized,sql_statement,drop_table_name=True)
    unique_regions = set()
    next(file)
    for i in file:
      i = i.strip()
      i = i.split('\t')
      area = i[4]
      unique_regions.add(area)
      unique_regions = sorted(list(unique_regions))
      for i in range(len(unique_regions)):
        unique_regions[i] = (i+1, unique_regions[i])
    cursor = conn_normalized.cursor()
    sql_statement = 'Insert into Region values (?,?)'
    cursor.executemany(sql_statement,unique_regions)
    conn_normalized.commit()
    conn_normalized.close()

def step2_create_region_to_regionid_dictionary(normalized_database_filename):
    pass
    
# WRITE YOUR CODE HERE


def step3_create_country_table(data_filename, normalized_database_filename):
    # Inputs: Name of the data and normalized database filename
    # Output: None
    pass
# WRITE YOUR CODE HERE


def step4_create_country_to_countryid_dictionary(normalized_database_filename):
    pass
    
# WRITE YOUR CODE HERE
        
        
def step5_create_customer_table(data_filename, normalized_database_filename):
   pass
# WRITE YOUR CODE HERE


def step6_create_customer_to_customerid_dictionary(normalized_database_filename):
    
    pass
# WRITE YOUR CODE HERE
        
def step7_create_productcategory_table(data_filename, normalized_database_filename):
    # Inputs: Name of the data and normalized database filename
    # Output: None
  pass
    
# WRITE YOUR CODE HERE

def step8_create_productcategory_to_productcategoryid_dictionary(normalized_database_filename):
    
    pass
# WRITE YOUR CODE HERE
        

def step9_create_product_table(data_filename, normalized_database_filename):
    # Inputs: Name of the data and normalized database filename
    # Output: None

    pass
# WRITE YOUR CODE HERE


def step10_create_product_to_productid_dictionary(normalized_database_filename):
    
# WRITE YOUR CODE HERE
        pass

def step11_create_orderdetail_table(data_filename, normalized_database_filename):
    # Inputs: Name of the data and normalized database filename
    # Output: None
   pass
    
# WRITE YOUR CODE HERE


def ex1(conn, CustomerName):
    
    # Simply, you are fetching all the rows for a given CustomerName. 
    # Write an SQL statement that SELECTs From the OrderDetail table and joins with the Customer and Product table.
    # Pull out the following columns. 
    # Name -- concatenation of FirstName and LastName
    # ProductName
    # OrderDate
    # ProductUnitPrice
    # QuantityOrdered
    # Total -- which is calculated from multiplying ProductUnitPrice with QuantityOrdered -- round to two decimal places
    # HINT: USE customer_to_customerid_dict to map customer name to customer id and then use where clause with CustomerID
    pass
    sql_statement = """
    """
# WRITE YOUR CODE HERE
    return sql_statement

def ex2(conn, CustomerName):
    pass
    # Simply, you are summing the total for a given CustomerName. 
    # Write an SQL statement that SELECTs From the OrderDetail table and joins with the Customer and Product table.
    # Pull out the following columns. 
    # Name -- concatenation of FirstName and LastName
    # Total -- which is calculated from multiplying ProductUnitPrice with QuantityOrdered -- sum first and then round to two decimal places
    # HINT: USE customer_to_customerid_dict to map customer name to customer id and then use where clause with CustomerID
    
    sql_statement = """
    """
# WRITE YOUR CODE HERE
    return sql_statement

def ex3(conn):
    pass
    # Simply, find the total for all the customers
    # Write an SQL statement that SELECTs From the OrderDetail table and joins with the Customer and Product table.
    # Pull out the following columns. 
    # Name -- concatenation of FirstName and LastName
    # Total -- which is calculated from multiplying ProductUnitPrice with QuantityOrdered -- sum first and then round to two decimal places
    # ORDER BY Total Descending 
    
    sql_statement = """
    """
# WRITE YOUR CODE HERE
    return sql_statement

def ex4(conn):
    pass
    # Simply, find the total for all the region
    # Write an SQL statement that SELECTs From the OrderDetail table and joins with the Customer, Product, Country, and 
    # Region tables.
    # Pull out the following columns. 
    # Region
    # Total -- which is calculated from multiplying ProductUnitPrice with QuantityOrdered -- sum first and then round to two decimal places
    # ORDER BY Total Descending 
    
    sql_statement = """
    """
# WRITE YOUR CODE HERE
    return sql_statement

def ex5(conn):
    pass
    # Simply, find the total for all the countries
    # Write an SQL statement that SELECTs From the OrderDetail table and joins with the Customer, Product, and Country table.
    # Pull out the following columns. 
    # Country
    # Total -- which is calculated from multiplying ProductUnitPrice with QuantityOrdered -- sum first and then round
    # ORDER BY Total Descending 

    sql_statement = """
    """

# WRITE YOUR CODE HERE
    return sql_statement


def ex6(conn):
    pass
    # Rank the countries within a region based on order total
    # Output Columns: Region, Country, CountryTotal, TotalRank
    # Hint: Round the the total
    # Hint: Sort ASC by Region

    sql_statement = """
    """

# WRITE YOUR CODE HERE
    df = pd.read_sql_query(sql_statement, conn)
    return sql_statement



def ex7(conn):
    pass
    # Rank the countries within a region based on order total, BUT only select the TOP country, meaning rank = 1!
    # Output Columns: Region, Country, Total, TotalRank
    # Hint: Round the the total
    # Hint: Sort ASC by Region
    # HINT: Use "WITH"

    sql_statement = """
    """
# WRITE YOUR CODE HERE
    return sql_statement

def ex8(conn):
    pass
    # Sum customer sales by Quarter and year
    # Output Columns: Quarter,Year,CustomerID,Total
    # HINT: Use "WITH"
    # Hint: Round the the total
    # HINT: YOU MUST CAST YEAR TO TYPE INTEGER!!!!

    sql_statement = """
    """
# WRITE YOUR CODE HERE
    return sql_statement

def ex9(conn):
    pass
    # Rank the customer sales by Quarter and year, but only select the top 5 customers!
    # Output Columns: Quarter, Year, CustomerID, Total
    # HINT: Use "WITH"
    # Hint: Round the the total
    # HINT: YOU MUST CAST YEAR TO TYPE INTEGER!!!!
    # HINT: You can have multiple CTE tables;
    # WITH table1 AS (), table2 AS ()

    sql_statement = """
    """
# WRITE YOUR CODE HERE
    return sql_statement

def ex10(conn):
    pass
    # Rank the monthy sales
    # Output Columns: Quarter, Year, CustomerID, Total
    # HINT: Use "WITH"
    # Hint: Round the the total

    sql_statement = """
    """

# WRITE YOUR CODE HERE
    return sql_statement

def ex11(conn):
    pass
    # Find the MaxDaysWithoutOrder for each customer 
    # Output Columns: 
    # CustomerID,
    # FirstName,
    # LastName,
    # Country,
    # OrderDate, 
    # PreviousOrderDate,
    # MaxDaysWithoutOrder
    # order by MaxDaysWithoutOrder desc
    # HINT: Use "WITH"; I created two CTE tables
    # HINT: Use Lag
    sql_statement = """
    """
# WRITE YOUR CODE HERE
    return sql_statement